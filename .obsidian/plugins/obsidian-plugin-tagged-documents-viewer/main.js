/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  SettingsTab: () => SettingsTab,
  default: () => TaggedDocumentsViewer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// utils/links.ts
function isMacOS() {
  var _a;
  const platform = ((_a = navigator == null ? void 0 : navigator.userAgentData) == null ? void 0 : _a.platform) || (navigator == null ? void 0 : navigator.platform);
  return platform.toLowerCase().startsWith("mac");
}
function isMetaKey(event) {
  return isMacOS() ? event.metaKey : event.ctrlKey;
}
function openLink(app, dest, currFile, event) {
  return __async(this, null, function* () {
    const destFile = app.metadataCache.getFirstLinkpathDest(dest, currFile.path);
    const mode = app.vault.getConfig("defaultViewMode");
    const leaf = app.workspace.getLeaf(isMetaKey(event));
    yield leaf.openFile(destFile, { active: true, mode });
  });
}
function createLink(app, file, onClick) {
  const link = createTextContent("a", file.basename);
  link.style.cursor = "pointer";
  link.dataset.href = file.path;
  link.classList.add("internal-link");
  link.onclick = (e) => {
    openLink(app, file.path, file, e);
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return link;
}
function createTextContent(element, content) {
  const el = document.createElement(element);
  el.setText(content);
  return el;
}

// main.ts
var DEFAULT_SETTINGS = {
  displayRibbonIcon: true,
  openModalOnClick: true,
  requireOptionKey: false
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Display Ribbon Icon").setDesc("Display a ribbon icon which will open the modal when clicked.").addToggle((component) => {
      component.setValue(this.plugin.settings.displayRibbonIcon).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayRibbonIcon = value;
        this.plugin.onSettingChange(0 /* DisplayRibbonIcon */, value);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Open Modal On Click").setDesc("Open the model when a tag is clicked.").addToggle((component) => {
      component.setValue(this.plugin.settings.openModalOnClick).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.openModalOnClick = value;
        this.plugin.onSettingChange(1 /* OpenModalOnClick */, value);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Require Alt/Option Key").setDesc("Require the alt/option key to be down when clicking a tag.").addToggle((component) => {
      component.setValue(this.plugin.settings.requireOptionKey).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.requireOptionKey = value;
        this.plugin.onSettingChange(2 /* RequireOptionKey */, value);
        yield this.plugin.saveSettings();
      }));
    });
  }
};
var TaggedDocumentsViewer = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.openModalOnClick = true;
    this.requireOptionKey = false;
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.openModalOnClick = this.settings.openModalOnClick;
      this.requireOptionKey = this.settings.requireOptionKey;
      this.addSettingTab(new SettingsTab(this.app, this));
      this.registerDomEvent(document, "click", (evt) => {
        if (!this.openModalOnClick)
          return;
        if (this.requireOptionKey && !evt.altKey)
          return;
        this.handleClick(evt.target);
      });
      if (this.settings.displayRibbonIcon) {
        this.showRibbonIcon();
      }
    });
  }
  onunload() {
  }
  showRibbonIcon() {
    this.ribbonIcon = this.addRibbonIcon("hashtag", "Tagged Documents Viewer", (evt) => {
      new TaggedDocumentsModal(this.app, "").open();
    });
  }
  hideRibbonIcon() {
    this.ribbonIcon.remove();
  }
  onSettingChange(setting, value) {
    switch (setting) {
      case 0 /* DisplayRibbonIcon */:
        if (value)
          this.showRibbonIcon();
        else
          this.hideRibbonIcon();
        return;
      case 1 /* OpenModalOnClick */:
        this.openModalOnClick = value;
        return;
      case 2 /* RequireOptionKey */:
        this.requireOptionKey = value;
        return;
    }
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  isTagNode(target) {
    return target.classList.contains("tag") || target.classList.contains("cm-hashtag");
  }
  handleClick(target) {
    return __async(this, null, function* () {
      if (!this.isTagNode(target))
        return;
      const tag = target.innerText;
      new TaggedDocumentsModal(this.app, tag).open();
    });
  }
};
var TaggedDocumentsModal = class extends import_obsidian.Modal {
  constructor(app, tag) {
    super(app);
    this.contents = [];
    this.tag = "";
    this.querying = false;
    this.tag = tag;
    this.contents = [];
  }
  getTaglists() {
    const tags = this.tag.split(" ");
    const include = tags.filter((tag) => tag.charAt(0) !== "!");
    const exclude = tags.filter((tag) => tag.charAt(0) === "!").map((tag) => tag.substring(1));
    return [include, exclude];
  }
  hasTag(tags, value) {
    if (!tags.length || !Array.isArray(tags))
      return false;
    return tags.some((v) => v.toLocaleLowerCase() === value.toLocaleLowerCase());
  }
  getAllFilesMatchingTag(app, tag) {
    const files = app.vault.getMarkdownFiles();
    const result = /* @__PURE__ */ new Set();
    for (let file of files) {
      const tags = (0, import_obsidian.getAllTags)(app.metadataCache.getCache(file.path)) || [];
      if (this.hasTag(tags, `#${tag}`)) {
        result.add(file);
      }
    }
    return result;
  }
  getFilesFromTag(tags) {
    return tags.reduce((accumulator, tag) => {
      return [...accumulator, ...Array.from(this.getAllFilesMatchingTag(this.app, tag) || [])];
    }, []);
  }
  getFiles() {
    const [tagsToInclude, tagsToExclude] = this.getTaglists();
    const startingFiles = this.getFilesFromTag(tagsToInclude);
    const filesToExclude = this.getFilesFromTag(tagsToExclude).map((file) => file.path);
    return startingFiles.filter((file) => !filesToExclude.includes(file.path));
  }
  getPages() {
    return __async(this, null, function* () {
      const files = this.getFiles();
      const numFiles = files.length;
      const contents = [];
      for (let i = 0; i < numFiles; i++) {
        const file = files[i];
        contents.push({ file, text: yield this.app.vault.cachedRead(file) });
      }
      return contents;
    });
  }
  getListContents() {
    return __async(this, null, function* () {
      const contents = yield this.getPages();
      const ul = document.createElement("ul");
      contents.forEach((_0) => __async(this, [_0], function* ({ file, text }) {
        const li = ul.createEl("li");
        const title = document.createElement("h3");
        const link = createLink(this.app, file, () => this.close());
        const content = document.createElement("div");
        yield import_obsidian.MarkdownRenderer.renderMarkdown(text, content, file.path);
        li.appendChild(title);
        title.appendChild(link);
        li.appendChild(content);
      }));
      return ul;
    });
  }
  makeListItems() {
    return __async(this, null, function* () {
      const list = document.querySelector("[data-tageed-documents-viewer-list]");
      list.innerHTML = "";
      this.querying = true;
      list.appendChild(yield this.getListContents());
      this.querying = false;
    });
  }
  tagQuerySubmitLister() {
    return __async(this, null, function* () {
      if (this.querying)
        return;
      const inputEl = document.querySelector("[data-tag-names]");
      this.tag = inputEl.value;
      yield this.makeListItems();
    });
  }
  tagQueryKeyListener(event) {
    if (event.key === "Enter") {
      this.tagQuerySubmitLister();
    }
  }
  renderContainer() {
    const container = document.createElement("div");
    container.addClass("tagged-documents-viewer-container");
    return container;
  }
  renderInput() {
    const input = document.createElement("input");
    this.input = input;
    input.value = this.tag;
    input.setAttribute("data-tag-names", "");
    input.addEventListener("keypress", this.tagQueryKeyListener.bind(this));
    return input;
  }
  renderButton() {
    const button = document.createElement("button");
    this.button = button;
    button.innerText = "OK";
    button.addEventListener("click", this.tagQuerySubmitLister.bind(this));
    return button;
  }
  renderForm() {
    const form = document.createElement("div");
    form.addClass("tagged-documents-viewer-form");
    const input = this.renderInput();
    input.setAttribute("placeholder", "tag-1 tag-2 !not-tag-3");
    const button = this.renderButton();
    form.appendChild(input);
    form.appendChild(button);
    return form;
  }
  renderList() {
    return __async(this, null, function* () {
      const list = document.createElement("div");
      list.setAttribute("data-tageed-documents-viewer-list", "");
      list.addClass("tagged-documents-viewer-list-container");
      const listContents = yield this.getListContents();
      list.appendChild(listContents);
      return list;
    });
  }
  renderLayout() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.empty();
      const container = this.renderContainer();
      const form = this.renderForm();
      const list = yield this.renderList();
      container.appendChild(form);
      container.appendChild(list);
      contentEl.appendChild(container);
      return list;
    });
  }
  onOpen() {
    return __async(this, null, function* () {
      const list = yield this.renderLayout();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.button.removeEventListener("click", this.tagQuerySubmitLister);
    this.input.removeEventListener("keydown", this.tagQueryKeyListener);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ1dGlscy9saW5rcy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgXG5cdEFwcCwgXG5cdE1vZGFsLCBcblx0UGx1Z2luLCBcblx0VEZpbGUsIFxuXHRnZXRBbGxUYWdzLCBcblx0Q2FjaGVkTWV0YWRhdGEsIFxuXHRNYXJrZG93blJlbmRlcmVyLFxuXHRTZXR0aW5nLCBcblx0UGx1Z2luU2V0dGluZ1RhYiwgXG5cdFRvZ2dsZUNvbXBvbmVudH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBjcmVhdGVMaW5rIH0gZnJvbSAnLi91dGlscy9saW5rcydcblxudHlwZSBGaWxlSW5mbyA9IHtcblx0ZmlsZTogVEZpbGUsIFxuXHR0ZXh0OiBzdHJpbmdcbn1cblxuZW51bSBTZXR0aW5ncyB7XG5cdERpc3BsYXlSaWJib25JY29uLFxuXHRPcGVuTW9kYWxPbkNsaWNrLFxuXHRSZXF1aXJlT3B0aW9uS2V5XG59XG5cbmludGVyZmFjZSBQbHVnaW5TZXR0aW5ncyB7XG5cdGRpc3BsYXlSaWJib25JY29uOiBib29sZWFuO1xuXHRvcGVuTW9kYWxPbkNsaWNrOiBib29sZWFuO1xuXHRyZXF1aXJlT3B0aW9uS2V5OiBib29sZWFuO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQYXJ0aWFsPFBsdWdpblNldHRpbmdzPiA9IHtcblx0ZGlzcGxheVJpYmJvbkljb246IHRydWUsXG5cdG9wZW5Nb2RhbE9uQ2xpY2s6IHRydWUsXG5cdHJlcXVpcmVPcHRpb25LZXk6IGZhbHNlXG59O1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBUYWdnZWREb2N1bWVudHNWaWV3ZXI7XG4gIFxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUYWdnZWREb2N1bWVudHNWaWV3ZXIpIHtcblx0ICBzdXBlcihhcHAsIHBsdWdpbik7XG5cdCAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cbiAgXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdCAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gIFxuXHQgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gIFxuXHQgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdC5zZXROYW1lKFwiRGlzcGxheSBSaWJib24gSWNvblwiKVxuXHRcdC5zZXREZXNjKFwiRGlzcGxheSBhIHJpYmJvbiBpY29uIHdoaWNoIHdpbGwgb3BlbiB0aGUgbW9kYWwgd2hlbiBjbGlja2VkLlwiKVxuXHRcdC5hZGRUb2dnbGUoKGNvbXBvbmVudDogVG9nZ2xlQ29tcG9uZW50KSA9PiB7XG5cdFx0XHRjb21wb25lbnRcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRpc3BsYXlSaWJib25JY29uKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzcGxheVJpYmJvbkljb24gPSB2YWx1ZTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5vblNldHRpbmdDaGFuZ2UoU2V0dGluZ3MuRGlzcGxheVJpYmJvbkljb24sIHZhbHVlKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXHRcdH0pXG5cblx0IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdC5zZXROYW1lKFwiT3BlbiBNb2RhbCBPbiBDbGlja1wiKVxuXHRcdC5zZXREZXNjKFwiT3BlbiB0aGUgbW9kZWwgd2hlbiBhIHRhZyBpcyBjbGlja2VkLlwiKVxuXHRcdC5hZGRUb2dnbGUoKGNvbXBvbmVudDogVG9nZ2xlQ29tcG9uZW50KSA9PiB7XG5cdFx0XHRjb21wb25lbnRcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5Nb2RhbE9uQ2xpY2spXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuTW9kYWxPbkNsaWNrID0gdmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ub25TZXR0aW5nQ2hhbmdlKFNldHRpbmdzLk9wZW5Nb2RhbE9uQ2xpY2ssIHZhbHVlKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXHRcdH0pXG5cblx0IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdC5zZXROYW1lKFwiUmVxdWlyZSBBbHQvT3B0aW9uIEtleVwiKVxuXHRcdC5zZXREZXNjKFwiUmVxdWlyZSB0aGUgYWx0L29wdGlvbiBrZXkgdG8gYmUgZG93biB3aGVuIGNsaWNraW5nIGEgdGFnLlwiKVxuXHRcdC5hZGRUb2dnbGUoKGNvbXBvbmVudDogVG9nZ2xlQ29tcG9uZW50KSA9PiB7XG5cdFx0XHRjb21wb25lbnRcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcXVpcmVPcHRpb25LZXkpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXF1aXJlT3B0aW9uS2V5ID0gdmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ub25TZXR0aW5nQ2hhbmdlKFNldHRpbmdzLlJlcXVpcmVPcHRpb25LZXksIHZhbHVlKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXHRcdH0pXG5cdH1cbiAgfVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWdnZWREb2N1bWVudHNWaWV3ZXIgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3Ncblx0b3Blbk1vZGFsT25DbGljazogYm9vbGVhbiA9IHRydWVcblx0cmVxdWlyZU9wdGlvbktleTogYm9vbGVhbiA9IGZhbHNlXG5cdHJpYmJvbkljb246IEhUTUxFbGVtZW50XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKClcblx0XHR0aGlzLm9wZW5Nb2RhbE9uQ2xpY2sgPSB0aGlzLnNldHRpbmdzLm9wZW5Nb2RhbE9uQ2xpY2tcblx0XHR0aGlzLnJlcXVpcmVPcHRpb25LZXkgPSB0aGlzLnNldHRpbmdzLnJlcXVpcmVPcHRpb25LZXlcblxuICAgIFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHRcdFxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJjbGlja1wiLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMub3Blbk1vZGFsT25DbGljaykgcmV0dXJuO1xuXHRcdFx0aWYgKHRoaXMucmVxdWlyZU9wdGlvbktleSAmJiAhZXZ0LmFsdEtleSkgcmV0dXJuXG5cdFx0XHR0aGlzLmhhbmRsZUNsaWNrKGV2dC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpXG5cdFx0fSlcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmRpc3BsYXlSaWJib25JY29uKSB7XG5cdFx0XHR0aGlzLnNob3dSaWJib25JY29uKClcblx0XHR9XG5cdH1cblxuXHRvbnVubG9hZCgpIHt9XG5cblx0c2hvd1JpYmJvbkljb24oKSB7XG5cdFx0dGhpcy5yaWJib25JY29uID0gdGhpcy5hZGRSaWJib25JY29uKCdoYXNodGFnJywgJ1RhZ2dlZCBEb2N1bWVudHMgVmlld2VyJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0bmV3IFRhZ2dlZERvY3VtZW50c01vZGFsKHRoaXMuYXBwLCAnJykub3BlbigpXG5cdFx0fSlcblx0fVxuXG5cdGhpZGVSaWJib25JY29uKCkge1xuXHRcdHRoaXMucmliYm9uSWNvbi5yZW1vdmUoKVxuXHR9XG5cblx0b25TZXR0aW5nQ2hhbmdlKHNldHRpbmc6IFNldHRpbmdzLCB2YWx1ZTogYm9vbGVhbikge1xuXHRcdFx0c3dpdGNoIChzZXR0aW5nKSB7XG5cdFx0XHRcdGNhc2UgU2V0dGluZ3MuRGlzcGxheVJpYmJvbkljb246XG5cdFx0XHRcdFx0aWYgKHZhbHVlKSB0aGlzLnNob3dSaWJib25JY29uKClcblx0XHRcdFx0XHRlbHNlIHRoaXMuaGlkZVJpYmJvbkljb24oKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBTZXR0aW5ncy5PcGVuTW9kYWxPbkNsaWNrOlxuXHRcdFx0XHRcdHRoaXMub3Blbk1vZGFsT25DbGljayA9IHZhbHVlXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIFNldHRpbmdzLlJlcXVpcmVPcHRpb25LZXk6XG5cdFx0XHRcdFx0dGhpcy5yZXF1aXJlT3B0aW9uS2V5ID0gdmFsdWVcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdGlzVGFnTm9kZSh0YXJnZXQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YWdcIikgfHxcblx0XHRcdHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjbS1oYXNodGFnXCIpXG5cdFx0KVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBoYW5kbGVDbGljayh0YXJnZXQ6IEhUTUxFbGVtZW50KSB7XG5cdFx0aWYgKCF0aGlzLmlzVGFnTm9kZSh0YXJnZXQpKSByZXR1cm5cblx0XHRjb25zdCB0YWcgPSB0YXJnZXQuaW5uZXJUZXh0XG5cdFx0bmV3IFRhZ2dlZERvY3VtZW50c01vZGFsKHRoaXMuYXBwLCB0YWcpLm9wZW4oKVxuXHR9XG59XG5cbmNsYXNzIFRhZ2dlZERvY3VtZW50c01vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRjb250ZW50czogRmlsZUluZm9bXSA9IFtdXG5cdHRhZzogc3RyaW5nID0gJydcblx0YnV0dG9uOiBIVE1MRWxlbWVudFxuXHRpbnB1dDogSFRNTEVsZW1lbnRcblx0YnV0dG9uTGlzdGVuZXI6IG51bWJlclxuXHRxdWVyeWluZyA9IGZhbHNlXG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHRhZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoYXBwKVxuXHRcdHRoaXMudGFnID0gdGFnXG5cdFx0dGhpcy5jb250ZW50cyA9IFtdXG5cdH1cblxuXHRnZXRUYWdsaXN0cygpIDogW3N0cmluZ1tdLCBzdHJpbmdbXV0ge1xuXHRcdGNvbnN0IHRhZ3MgPSB0aGlzLnRhZy5zcGxpdCgnICcpXG5cdFx0Y29uc3QgaW5jbHVkZSA9IHRhZ3MuZmlsdGVyKHRhZyA9PiB0YWcuY2hhckF0KDApICE9PSAnIScpXG5cdFx0Y29uc3QgZXhjbHVkZSA9IHRhZ3MuZmlsdGVyKHRhZyA9PiB0YWcuY2hhckF0KDApID09PSAnIScpLm1hcCh0YWcgPT4gdGFnLnN1YnN0cmluZygxKSlcblxuXHRcdHJldHVybiBbaW5jbHVkZSwgZXhjbHVkZV1cblx0fVxuXG5cdGhhc1RhZyh0YWdzOiBzdHJpbmdbXSwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdGlmICghdGFncy5sZW5ndGggfHwgIUFycmF5LmlzQXJyYXkodGFncykpIHJldHVybiBmYWxzZVxuXHRcdHJldHVybiB0YWdzLnNvbWUoKHYpID0+IHYudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gdmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKSlcblx0fVxuXG5cdC8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vQWlkdXJiZXIvdGFnLXBhZ2UtcHJldmlldy9ibG9iL21hc3Rlci9zcmMvdXRpbHMvZmluZC10YWdzLnRzXG5cdGdldEFsbEZpbGVzTWF0Y2hpbmdUYWcoYXBwOiBBcHAsIHRhZzogc3RyaW5nKTogU2V0PFRGaWxlPiB7XG5cdFx0Y29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXG5cdFx0Y29uc3QgcmVzdWx0OiBTZXQ8VEZpbGU+ID0gbmV3IFNldCgpXG5cdFx0Zm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuXHRcdCAgY29uc3QgdGFncyA9IGdldEFsbFRhZ3MoYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoZmlsZS5wYXRoKSBhcyBDYWNoZWRNZXRhZGF0YSkgfHwgW11cblx0XHQgIGlmICh0aGlzLmhhc1RhZyh0YWdzLCBgIyR7dGFnfWApKSB7XG5cdFx0XHRyZXN1bHQuYWRkKGZpbGUpXG5cdFx0ICB9XG5cdFx0fVxuXHQgIFxuXHRcdHJldHVybiByZXN1bHRcblx0fVxuXG5cdGdldEZpbGVzRnJvbVRhZyh0YWdzOiBzdHJpbmdbXSk6IFRGaWxlW10ge1xuXHRcdHJldHVybiB0YWdzLnJlZHVjZSgoYWNjdW11bGF0b3IsIHRhZykgPT4ge1xuXHRcdFx0cmV0dXJuICBbLi4uYWNjdW11bGF0b3IsIC4uLkFycmF5LmZyb20odGhpcy5nZXRBbGxGaWxlc01hdGNoaW5nVGFnKHRoaXMuYXBwLCB0YWcpIHx8IFtdKV1cblx0XHR9LCBbXSlcblx0fVxuXG5cdGdldEZpbGVzKCkgOiBURmlsZVtdIHtcblx0XHRjb25zdCBbdGFnc1RvSW5jbHVkZSwgdGFnc1RvRXhjbHVkZV0gPSB0aGlzLmdldFRhZ2xpc3RzKClcblx0XHRjb25zdCBzdGFydGluZ0ZpbGVzOiBURmlsZVtdID0gdGhpcy5nZXRGaWxlc0Zyb21UYWcodGFnc1RvSW5jbHVkZSlcblx0XHRjb25zdCBmaWxlc1RvRXhjbHVkZTogc3RyaW5nW10gPSB0aGlzLmdldEZpbGVzRnJvbVRhZyh0YWdzVG9FeGNsdWRlKS5tYXAoZmlsZSA9PiBmaWxlLnBhdGgpXG5cdFx0cmV0dXJuIHN0YXJ0aW5nRmlsZXMuZmlsdGVyKGZpbGUgPT4gIWZpbGVzVG9FeGNsdWRlLmluY2x1ZGVzKGZpbGUucGF0aCkpXG5cdH1cblxuXHRhc3luYyBnZXRQYWdlcygpOiBQcm9taXNlPEZpbGVJbmZvW10+IHtcblx0XHRjb25zdCBmaWxlczogVEZpbGVbXSA9IHRoaXMuZ2V0RmlsZXMoKVxuXHRcdGNvbnN0IG51bUZpbGVzID0gZmlsZXMubGVuZ3RoXG5cdFx0Y29uc3QgY29udGVudHM6IEZpbGVJbmZvW10gPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRmlsZXM7IGkrKykge1xuXHRcdFx0Y29uc3QgZmlsZSA9IGZpbGVzW2ldXG5cdFx0XHRjb250ZW50cy5wdXNoKHtmaWxlLCB0ZXh0OiBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpfSlcblx0XHR9XG5cdFx0cmV0dXJuIGNvbnRlbnRzXG5cdH1cblxuXHRhc3luYyBnZXRMaXN0Q29udGVudHMoKSB7XG5cdFx0Y29uc3QgY29udGVudHM6IEZpbGVJbmZvW10gPSBhd2FpdCB0aGlzLmdldFBhZ2VzKClcblx0XHRjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJylcblx0XHRjb250ZW50cy5mb3JFYWNoKGFzeW5jICh7ZmlsZSwgdGV4dH0pID0+IHtcblx0XHRcdGNvbnN0IGxpID0gdWwuY3JlYXRlRWwoJ2xpJylcblx0XHRcdGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKVxuXHRcdFx0Y29uc3QgbGluayA9IGNyZWF0ZUxpbmsodGhpcy5hcHAsIGZpbGUsICgpID0+IHRoaXMuY2xvc2UoKSlcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0YXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bih0ZXh0LCBjb250ZW50LCBmaWxlLnBhdGgpXG5cdFx0XHRsaS5hcHBlbmRDaGlsZCh0aXRsZSlcblx0XHRcdHRpdGxlLmFwcGVuZENoaWxkKGxpbmspXG5cdFx0XHRsaS5hcHBlbmRDaGlsZChjb250ZW50KVxuXHRcdH0pXG5cblx0XHRyZXR1cm4gdWxcblx0fVxuXG5cdGFzeW5jIG1ha2VMaXN0SXRlbXMoKSB7XG5cdFx0Y29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRhZ2VlZC1kb2N1bWVudHMtdmlld2VyLWxpc3RdJykgYXMgSFRNTEVsZW1lbnRcblx0XHRsaXN0LmlubmVySFRNTCA9ICcnXG5cdFx0dGhpcy5xdWVyeWluZyA9IHRydWVcblx0XHRsaXN0LmFwcGVuZENoaWxkKGF3YWl0IHRoaXMuZ2V0TGlzdENvbnRlbnRzKCkpXG5cdFx0dGhpcy5xdWVyeWluZyA9IGZhbHNlXG5cdH1cblxuXHRhc3luYyB0YWdRdWVyeVN1Ym1pdExpc3RlcigpIHtcblx0XHRpZiAodGhpcy5xdWVyeWluZykgcmV0dXJuXG5cdFx0Y29uc3QgaW5wdXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRhZy1uYW1lc10nKSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0dGhpcy50YWcgPSBpbnB1dEVsLnZhbHVlXG5cdFx0YXdhaXQgdGhpcy5tYWtlTGlzdEl0ZW1zKClcblx0fVxuXG5cdHRhZ1F1ZXJ5S2V5TGlzdGVuZXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG5cdFx0XHR0aGlzLnRhZ1F1ZXJ5U3VibWl0TGlzdGVyKClcblx0XHR9XG5cdH1cblxuXHRyZW5kZXJDb250YWluZXIoKSB7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRjb250YWluZXIuYWRkQ2xhc3MoJ3RhZ2dlZC1kb2N1bWVudHMtdmlld2VyLWNvbnRhaW5lcicpXG5cblx0XHRyZXR1cm4gY29udGFpbmVyXG5cdH1cblxuXHRyZW5kZXJJbnB1dCgpIHtcblx0XHRjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jylcblx0XHR0aGlzLmlucHV0ID0gaW5wdXRcblx0XHRpbnB1dC52YWx1ZSA9IHRoaXMudGFnXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCdkYXRhLXRhZy1uYW1lcycsICcnKVxuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgdGhpcy50YWdRdWVyeUtleUxpc3RlbmVyLmJpbmQodGhpcykpXG5cblx0XHRyZXR1cm4gaW5wdXRcblx0fVxuXG5cdHJlbmRlckJ1dHRvbigpIHtcblx0XHRjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuXHRcdHRoaXMuYnV0dG9uID0gYnV0dG9uXG5cdFx0YnV0dG9uLmlubmVyVGV4dCA9ICdPSydcblx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRhZ1F1ZXJ5U3VibWl0TGlzdGVyLmJpbmQodGhpcykpXG5cdFx0XG5cdFx0cmV0dXJuIGJ1dHRvblxuXHR9XG5cblx0cmVuZGVyRm9ybSgpIHtcblx0XHRjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRmb3JtLmFkZENsYXNzKCd0YWdnZWQtZG9jdW1lbnRzLXZpZXdlci1mb3JtJylcblx0XHRjb25zdCBpbnB1dCA9IHRoaXMucmVuZGVySW5wdXQoKVxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCAndGFnLTEgdGFnLTIgIW5vdC10YWctMycpXG5cdFx0Y29uc3QgYnV0dG9uID0gdGhpcy5yZW5kZXJCdXR0b24oKVxuXHRcdGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpXG5cdFx0Zm9ybS5hcHBlbmRDaGlsZChidXR0b24pXG5cblx0XHRyZXR1cm4gZm9ybVxuXHR9XG5cblx0YXN5bmMgcmVuZGVyTGlzdCgpIHtcblx0XHRjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRsaXN0LnNldEF0dHJpYnV0ZSgnZGF0YS10YWdlZWQtZG9jdW1lbnRzLXZpZXdlci1saXN0JywgJycpXG5cdFx0bGlzdC5hZGRDbGFzcygndGFnZ2VkLWRvY3VtZW50cy12aWV3ZXItbGlzdC1jb250YWluZXInKVxuXHRcdGNvbnN0IGxpc3RDb250ZW50cyA9IGF3YWl0IHRoaXMuZ2V0TGlzdENvbnRlbnRzKClcblx0XHRsaXN0LmFwcGVuZENoaWxkKGxpc3RDb250ZW50cylcblx0XHRyZXR1cm4gbGlzdFxuXHR9XG5cblx0YXN5bmMgcmVuZGVyTGF5b3V0KCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpc1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpXG5cdFx0Y29uc3QgY29udGFpbmVyID0gdGhpcy5yZW5kZXJDb250YWluZXIoKVxuXHRcdGNvbnN0IGZvcm0gPSB0aGlzLnJlbmRlckZvcm0oKVxuXHRcdGNvbnN0IGxpc3QgPSBhd2FpdCB0aGlzLnJlbmRlckxpc3QoKVxuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChmb3JtKVxuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChsaXN0KVxuXHRcdGNvbnRlbnRFbC5hcHBlbmRDaGlsZChjb250YWluZXIpXG5cblx0XHRyZXR1cm4gbGlzdFxuXHR9XG5cblx0YXN5bmMgb25PcGVuKCkge1xuXHRcdGNvbnN0IGxpc3QgPSBhd2FpdCB0aGlzLnJlbmRlckxheW91dCgpXG5cdH1cblxuXHRvbkNsb3NlKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpc1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpXG5cdFx0dGhpcy5idXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRhZ1F1ZXJ5U3VibWl0TGlzdGVyKVxuXHRcdHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMudGFnUXVlcnlLZXlMaXN0ZW5lcilcblx0fVxufVxuIiwgIi8vYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9BaWR1cmJlci90YWctcGFnZS1wcmV2aWV3L2Jsb2IvbWFzdGVyL3NyYy91dGlscy9yZW5kZXIudHNcbmltcG9ydCB7IEFwcCwgT3BlblZpZXdTdGF0ZSwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY3VycmVudCBPUyBpcyBtYWNPU1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaXNNYWNPUygpOiBib29sZWFuIHtcbiAgLy8gQHRzLWlnbm9yZSAtLSBuYXZpZ2F0b3IucGxhdGZvcm0gaXMgZGVwcmVjYXRlZCBpbiBzb21lIGJyb3dzZXJzXG4gIGNvbnN0IHBsYXRmb3JtID0gbmF2aWdhdG9yPy51c2VyQWdlbnREYXRhPy5wbGF0Zm9ybSB8fCBuYXZpZ2F0b3I/LnBsYXRmb3JtXG4gIC8vIG9uIE1hY3MsIHBsYXRmb3JtIG1pZ2h0IGJlIFwiTWFjSW50ZWxcIiBvciBcIm1hY09TXCJcbiAgcmV0dXJuIHBsYXRmb3JtLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcIm1hY1wiKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBldmVudCB3YXMgQ1RSTCBmb3IgV2luZG93cyBvciBDb21tYW5kIGZvciBtYWNPU1xuICogQHBhcmFtIGV2ZW50IC0gTW91c2UgRXZlbnRcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGlzTWV0YUtleShldmVudDogTW91c2VFdmVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNNYWNPUygpID8gZXZlbnQubWV0YUtleSA6IGV2ZW50LmN0cmxLZXk7XG59XG4vKipcbiAqIE9wZW4gYW4gT2JzaWRpYW4gbGlua1xuICogQHBhcmFtIGFwcCAtIE9ic2lkaWFuIEFwcCBvYmplY3RcbiAqIEBwYXJhbSBkZXN0ICAtIExpbmsgaHJlZlxuICogQHBhcmFtIGN1cnJGaWxlIC0gQ3VycmVudCBvcGVuIGZpbGVcbiAqIEBwYXJhbSBldmVudCAtIENsaWNrIGV2ZW50XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG9wZW5MaW5rKFxuICBhcHA6IEFwcCxcbiAgZGVzdDogc3RyaW5nLFxuICBjdXJyRmlsZTogVEZpbGUsXG4gIGV2ZW50OiBNb3VzZUV2ZW50XG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgZGVzdEZpbGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChkZXN0LCBjdXJyRmlsZS5wYXRoKTtcbiAgY29uc3QgbW9kZSA9IChhcHAudmF1bHQgYXMgYW55KS5nZXRDb25maWcoXCJkZWZhdWx0Vmlld01vZGVcIik7XG4gIGNvbnN0IGxlYWYgPSBhcHAud29ya3NwYWNlLmdldExlYWYoaXNNZXRhS2V5KGV2ZW50KSk7XG4gIGF3YWl0IGxlYWYub3BlbkZpbGUoZGVzdEZpbGUgYXMgVEZpbGUsIHsgYWN0aXZlOiB0cnVlLCBtb2RlfSBhcyBPcGVuVmlld1N0YXRlKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmF0aXZlLWlzaCBvYnNpZGlhbiBsaW5rXG4gKiBAcGFyYW0gYXBwIC0gT2JzaWRpYW4gQXBwXG4gKiBAcGFyYW0gZmlsZSAtIEZpbGUgdG8gbGlua1xuICogQHBhcmFtIG9uQ2xpY2sgLSBPcHRpb25hbDogb25DbGljayBjYWxsYmFja1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpbmsoXG4gIGFwcDogQXBwLFxuICBmaWxlOiBURmlsZSxcbiAgb25DbGljaz86IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkXG4pOiBIVE1MQW5jaG9yRWxlbWVudCB7XG4gIGNvbnN0IGxpbmsgPSBjcmVhdGVUZXh0Q29udGVudChcImFcIiwgZmlsZS5iYXNlbmFtZSk7XG4gIGxpbmsuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gIGxpbmsuZGF0YXNldC5ocmVmID0gZmlsZS5wYXRoO1xuICBsaW5rLmNsYXNzTGlzdC5hZGQoXCJpbnRlcm5hbC1saW5rXCIpO1xuICBsaW5rLm9uY2xpY2sgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIG9wZW5MaW5rKGFwcCwgZmlsZS5wYXRoLCBmaWxlLCBlKTtcblxuICAgIGlmICh0eXBlb2Ygb25DbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBvbkNsaWNrKGUpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpbms7XG59XG5cbi8qKlxuICogVXRpbGl0eSB0byBxdWlja2x5IGNyZWF0ZSBhIERPTSBlbGVtZW50IGFuZCBzZXQgdGhlIHRleHQgY29udGVudCBmb3IgaXRcbiAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCB0byByZW5kZXJcbiAqIEBwYXJhbSBjb250ZW50IC0gQ29udGVudCB0byBlbWJlZCBpbnRvIHRoZSBlbGVtZW50XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGV4dENvbnRlbnQ8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcD4oXG4gIGVsZW1lbnQ6IEssXG4gIGNvbnRlbnQ6IHN0cmluZ1xuKTogSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQpO1xuICBlbC5zZXRUZXh0KGNvbnRlbnQpO1xuICByZXR1cm4gZWw7XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFVdUI7OztBQ0h2QixtQkFBNEI7QUFQNUI7QUFTRSxRQUFNLFdBQVcsOENBQVcsa0JBQVgsbUJBQTBCLGFBQVksd0NBQVc7QUFFbEUsU0FBTyxTQUFTLFlBQVksRUFBRSxXQUFXLEtBQUs7QUFDaEQ7QUFPQSxtQkFBbUIsT0FBNEI7QUFDN0MsU0FBTyxRQUFRLElBQUksTUFBTSxVQUFVLE1BQU07QUFDM0M7QUFRQSxrQkFDRSxLQUNBLE1BQ0EsVUFDQSxPQUNlO0FBQUE7QUFDZixVQUFNLFdBQVcsSUFBSSxjQUFjLHFCQUFxQixNQUFNLFNBQVMsSUFBSTtBQUMzRSxVQUFNLE9BQVEsSUFBSSxNQUFjLFVBQVUsaUJBQWlCO0FBQzNELFVBQU0sT0FBTyxJQUFJLFVBQVUsUUFBUSxVQUFVLEtBQUssQ0FBQztBQUNuRCxVQUFNLEtBQUssU0FBUyxVQUFtQixFQUFFLFFBQVEsTUFBTSxLQUFJLENBQWtCO0FBQUEsRUFDL0U7QUFBQTtBQVFPLG9CQUNMLEtBQ0EsTUFDQSxTQUNtQjtBQUNuQixRQUFNLE9BQU8sa0JBQWtCLEtBQUssS0FBSyxRQUFRO0FBQ2pELE9BQUssTUFBTSxTQUFTO0FBQ3BCLE9BQUssUUFBUSxPQUFPLEtBQUs7QUFDekIsT0FBSyxVQUFVLElBQUksZUFBZTtBQUNsQyxPQUFLLFVBQVUsQ0FBQyxNQUFrQjtBQUNoQyxhQUFTLEtBQUssS0FBSyxNQUFNLE1BQU0sQ0FBQztBQUVoQyxRQUFJLE9BQU8sWUFBWSxZQUFZO0FBQ2pDLGNBQVEsQ0FBQztBQUFBLElBQ1g7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUO0FBUU8sMkJBQ0wsU0FDQSxTQUMwQjtBQUMxQixRQUFNLEtBQUssU0FBUyxjQUFjLE9BQU87QUFDekMsS0FBRyxRQUFRLE9BQU87QUFDbEIsU0FBTztBQUNUOzs7QURqREEsSUFBTSxtQkFBNEM7QUFBQSxFQUNqRCxtQkFBbUI7QUFBQSxFQUNuQixrQkFBa0I7QUFBQSxFQUNsQixrQkFBa0I7QUFDbkI7QUFFTyxJQUFNLGNBQU4sY0FBMEIsaUNBQWlCO0FBQUEsRUFHakQsWUFBWSxLQUFVLFFBQStCO0FBQ25ELFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFFBQUksRUFBRSxnQkFBZ0I7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHdCQUFRLFdBQVcsRUFDdkIsUUFBUSxxQkFBcUIsRUFDN0IsUUFBUSwrREFBK0QsRUFDdkUsVUFBVSxDQUFDLGNBQStCO0FBQzFDLGdCQUNFLFNBQVMsS0FBSyxPQUFPLFNBQVMsaUJBQWlCLEVBQy9DLFNBQVMsQ0FBTyxVQUFVO0FBQzFCLGFBQUssT0FBTyxTQUFTLG9CQUFvQjtBQUN6QyxhQUFLLE9BQU8sZ0JBQWdCLDJCQUE0QixLQUFLO0FBQzdELGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNoQyxFQUFDO0FBQUEsSUFDSCxDQUFDO0FBRUQsUUFBSSx3QkFBUSxXQUFXLEVBQ3RCLFFBQVEscUJBQXFCLEVBQzdCLFFBQVEsdUNBQXVDLEVBQy9DLFVBQVUsQ0FBQyxjQUErQjtBQUMxQyxnQkFDRSxTQUFTLEtBQUssT0FBTyxTQUFTLGdCQUFnQixFQUM5QyxTQUFTLENBQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyxtQkFBbUI7QUFDeEMsYUFBSyxPQUFPLGdCQUFnQiwwQkFBMkIsS0FBSztBQUM1RCxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDaEMsRUFBQztBQUFBLElBQ0gsQ0FBQztBQUVELFFBQUksd0JBQVEsV0FBVyxFQUN0QixRQUFRLHdCQUF3QixFQUNoQyxRQUFRLDREQUE0RCxFQUNwRSxVQUFVLENBQUMsY0FBK0I7QUFDMUMsZ0JBQ0UsU0FBUyxLQUFLLE9BQU8sU0FBUyxnQkFBZ0IsRUFDOUMsU0FBUyxDQUFPLFVBQVU7QUFDMUIsYUFBSyxPQUFPLFNBQVMsbUJBQW1CO0FBQ3hDLGFBQUssT0FBTyxnQkFBZ0IsMEJBQTJCLEtBQUs7QUFDNUQsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2hDLEVBQUM7QUFBQSxJQUNILENBQUM7QUFBQSxFQUNGO0FBQ0M7QUFFRixJQUFxQix3QkFBckIsY0FBbUQsdUJBQU87QUFBQSxFQUExRDtBQUFBO0FBRUMsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUFBO0FBQUEsRUFHNUIsQUFBTSxTQUFTO0FBQUE7QUFDZCxZQUFNLEtBQUssYUFBYTtBQUN4QixXQUFLLG1CQUFtQixLQUFLLFNBQVM7QUFDdEMsV0FBSyxtQkFBbUIsS0FBSyxTQUFTO0FBRW5DLFdBQUssY0FBYyxJQUFJLFlBQVksS0FBSyxLQUFLLElBQUksQ0FBQztBQUdyRCxXQUFLLGlCQUFpQixVQUFVLFNBQVMsQ0FBQyxRQUFvQjtBQUM3RCxZQUFJLENBQUMsS0FBSztBQUFrQjtBQUM1QixZQUFJLEtBQUssb0JBQW9CLENBQUMsSUFBSTtBQUFRO0FBQzFDLGFBQUssWUFBWSxJQUFJLE1BQXFCO0FBQUEsTUFDM0MsQ0FBQztBQUVELFVBQUksS0FBSyxTQUFTLG1CQUFtQjtBQUNwQyxhQUFLLGVBQWU7QUFBQSxNQUNyQjtBQUFBLElBQ0Q7QUFBQTtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUM7QUFBQSxFQUVaLGlCQUFpQjtBQUNoQixTQUFLLGFBQWEsS0FBSyxjQUFjLFdBQVcsMkJBQTJCLENBQUMsUUFBb0I7QUFDL0YsVUFBSSxxQkFBcUIsS0FBSyxLQUFLLEVBQUUsRUFBRSxLQUFLO0FBQUEsSUFDN0MsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLGlCQUFpQjtBQUNoQixTQUFLLFdBQVcsT0FBTztBQUFBLEVBQ3hCO0FBQUEsRUFFQSxnQkFBZ0IsU0FBbUIsT0FBZ0I7QUFDakQsWUFBUTtBQUFBLFdBQ0Y7QUFDSixZQUFJO0FBQU8sZUFBSyxlQUFlO0FBQUE7QUFDMUIsZUFBSyxlQUFlO0FBQ3pCO0FBQUEsV0FDSTtBQUNKLGFBQUssbUJBQW1CO0FBQ3hCO0FBQUEsV0FDSTtBQUNKLGFBQUssbUJBQW1CO0FBQ3hCO0FBQUE7QUFBQSxFQUVKO0FBQUEsRUFFQSxBQUFNLGVBQWU7QUFBQTtBQUNwQixXQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLElBQzFFO0FBQUE7QUFBQSxFQUVBLEFBQU0sZUFBZTtBQUFBO0FBQ3BCLFlBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLElBQ2xDO0FBQUE7QUFBQSxFQUVBLFVBQVUsUUFBOEI7QUFDdkMsV0FDQyxPQUFPLFVBQVUsU0FBUyxLQUFLLEtBQy9CLE9BQU8sVUFBVSxTQUFTLFlBQVk7QUFBQSxFQUV4QztBQUFBLEVBRUEsQUFBYyxZQUFZLFFBQXFCO0FBQUE7QUFDOUMsVUFBSSxDQUFDLEtBQUssVUFBVSxNQUFNO0FBQUc7QUFDN0IsWUFBTSxNQUFNLE9BQU87QUFDbkIsVUFBSSxxQkFBcUIsS0FBSyxLQUFLLEdBQUcsRUFBRSxLQUFLO0FBQUEsSUFDOUM7QUFBQTtBQUNEO0FBRUEsSUFBTSx1QkFBTixjQUFtQyxzQkFBTTtBQUFBLEVBUXhDLFlBQVksS0FBVSxLQUFhO0FBQ2xDLFVBQU0sR0FBRztBQVJWLG9CQUF1QixDQUFDO0FBQ3hCLGVBQWM7QUFJZCxvQkFBVztBQUlWLFNBQUssTUFBTTtBQUNYLFNBQUssV0FBVyxDQUFDO0FBQUEsRUFDbEI7QUFBQSxFQUVBLGNBQXFDO0FBQ3BDLFVBQU0sT0FBTyxLQUFLLElBQUksTUFBTSxHQUFHO0FBQy9CLFVBQU0sVUFBVSxLQUFLLE9BQU8sU0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUc7QUFDeEQsVUFBTSxVQUFVLEtBQUssT0FBTyxTQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLElBQUksU0FBTyxJQUFJLFVBQVUsQ0FBQyxDQUFDO0FBRXJGLFdBQU8sQ0FBQyxTQUFTLE9BQU87QUFBQSxFQUN6QjtBQUFBLEVBRUEsT0FBTyxNQUFnQixPQUF3QjtBQUM5QyxRQUFJLENBQUMsS0FBSyxVQUFVLENBQUMsTUFBTSxRQUFRLElBQUk7QUFBRyxhQUFPO0FBQ2pELFdBQU8sS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFLGtCQUFrQixNQUFNLE1BQU0sa0JBQWtCLENBQUM7QUFBQSxFQUM1RTtBQUFBLEVBR0EsdUJBQXVCLEtBQVUsS0FBeUI7QUFDekQsVUFBTSxRQUFRLElBQUksTUFBTSxpQkFBaUI7QUFDekMsVUFBTSxTQUFxQixvQkFBSSxJQUFJO0FBQ25DLGFBQVMsUUFBUSxPQUFPO0FBQ3RCLFlBQU0sT0FBTyxnQ0FBVyxJQUFJLGNBQWMsU0FBUyxLQUFLLElBQUksQ0FBbUIsS0FBSyxDQUFDO0FBQ3JGLFVBQUksS0FBSyxPQUFPLE1BQU0sSUFBSSxLQUFLLEdBQUc7QUFDbkMsZUFBTyxJQUFJLElBQUk7QUFBQSxNQUNkO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQSxFQUNSO0FBQUEsRUFFQSxnQkFBZ0IsTUFBeUI7QUFDeEMsV0FBTyxLQUFLLE9BQU8sQ0FBQyxhQUFhLFFBQVE7QUFDeEMsYUFBUSxDQUFDLEdBQUcsYUFBYSxHQUFHLE1BQU0sS0FBSyxLQUFLLHVCQUF1QixLQUFLLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQUEsSUFDekYsR0FBRyxDQUFDLENBQUM7QUFBQSxFQUNOO0FBQUEsRUFFQSxXQUFxQjtBQUNwQixVQUFNLENBQUMsZUFBZSxpQkFBaUIsS0FBSyxZQUFZO0FBQ3hELFVBQU0sZ0JBQXlCLEtBQUssZ0JBQWdCLGFBQWE7QUFDakUsVUFBTSxpQkFBMkIsS0FBSyxnQkFBZ0IsYUFBYSxFQUFFLElBQUksVUFBUSxLQUFLLElBQUk7QUFDMUYsV0FBTyxjQUFjLE9BQU8sVUFBUSxDQUFDLGVBQWUsU0FBUyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQ3hFO0FBQUEsRUFFQSxBQUFNLFdBQWdDO0FBQUE7QUFDckMsWUFBTSxRQUFpQixLQUFLLFNBQVM7QUFDckMsWUFBTSxXQUFXLE1BQU07QUFDdkIsWUFBTSxXQUF1QixDQUFDO0FBQzlCLGVBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxLQUFLO0FBQ2xDLGNBQU0sT0FBTyxNQUFNO0FBQ25CLGlCQUFTLEtBQUssRUFBQyxNQUFNLE1BQU0sTUFBTSxLQUFLLElBQUksTUFBTSxXQUFXLElBQUksRUFBQyxDQUFDO0FBQUEsTUFDbEU7QUFDQSxhQUFPO0FBQUEsSUFDUjtBQUFBO0FBQUEsRUFFQSxBQUFNLGtCQUFrQjtBQUFBO0FBQ3ZCLFlBQU0sV0FBdUIsTUFBTSxLQUFLLFNBQVM7QUFDakQsWUFBTSxLQUFLLFNBQVMsY0FBYyxJQUFJO0FBQ3RDLGVBQVMsUUFBUSxDQUFPLE9BQWlCLGVBQWpCLEtBQWlCLFdBQWpCLEVBQUMsTUFBTSxRQUFVO0FBQ3hDLGNBQU0sS0FBSyxHQUFHLFNBQVMsSUFBSTtBQUMzQixjQUFNLFFBQVEsU0FBUyxjQUFjLElBQUk7QUFDekMsY0FBTSxPQUFPLFdBQVcsS0FBSyxLQUFLLE1BQU0sTUFBTSxLQUFLLE1BQU0sQ0FBQztBQUMxRCxjQUFNLFVBQVUsU0FBUyxjQUFjLEtBQUs7QUFFNUMsY0FBTSxpQ0FBaUIsZUFBZSxNQUFNLFNBQVMsS0FBSyxJQUFJO0FBQzlELFdBQUcsWUFBWSxLQUFLO0FBQ3BCLGNBQU0sWUFBWSxJQUFJO0FBQ3RCLFdBQUcsWUFBWSxPQUFPO0FBQUEsTUFDdkIsRUFBQztBQUVELGFBQU87QUFBQSxJQUNSO0FBQUE7QUFBQSxFQUVBLEFBQU0sZ0JBQWdCO0FBQUE7QUFDckIsWUFBTSxPQUFPLFNBQVMsY0FBYyxxQ0FBcUM7QUFDekUsV0FBSyxZQUFZO0FBQ2pCLFdBQUssV0FBVztBQUNoQixXQUFLLFlBQVksTUFBTSxLQUFLLGdCQUFnQixDQUFDO0FBQzdDLFdBQUssV0FBVztBQUFBLElBQ2pCO0FBQUE7QUFBQSxFQUVBLEFBQU0sdUJBQXVCO0FBQUE7QUFDNUIsVUFBSSxLQUFLO0FBQVU7QUFDbkIsWUFBTSxVQUFVLFNBQVMsY0FBYyxrQkFBa0I7QUFDekQsV0FBSyxNQUFNLFFBQVE7QUFDbkIsWUFBTSxLQUFLLGNBQWM7QUFBQSxJQUMxQjtBQUFBO0FBQUEsRUFFQSxvQkFBb0IsT0FBc0I7QUFDekMsUUFBSSxNQUFNLFFBQVEsU0FBUztBQUMxQixXQUFLLHFCQUFxQjtBQUFBLElBQzNCO0FBQUEsRUFDRDtBQUFBLEVBRUEsa0JBQWtCO0FBQ2pCLFVBQU0sWUFBWSxTQUFTLGNBQWMsS0FBSztBQUM5QyxjQUFVLFNBQVMsbUNBQW1DO0FBRXRELFdBQU87QUFBQSxFQUNSO0FBQUEsRUFFQSxjQUFjO0FBQ2IsVUFBTSxRQUFRLFNBQVMsY0FBYyxPQUFPO0FBQzVDLFNBQUssUUFBUTtBQUNiLFVBQU0sUUFBUSxLQUFLO0FBQ25CLFVBQU0sYUFBYSxrQkFBa0IsRUFBRTtBQUN2QyxVQUFNLGlCQUFpQixZQUFZLEtBQUssb0JBQW9CLEtBQUssSUFBSSxDQUFDO0FBRXRFLFdBQU87QUFBQSxFQUNSO0FBQUEsRUFFQSxlQUFlO0FBQ2QsVUFBTSxTQUFTLFNBQVMsY0FBYyxRQUFRO0FBQzlDLFNBQUssU0FBUztBQUNkLFdBQU8sWUFBWTtBQUNuQixXQUFPLGlCQUFpQixTQUFTLEtBQUsscUJBQXFCLEtBQUssSUFBSSxDQUFDO0FBRXJFLFdBQU87QUFBQSxFQUNSO0FBQUEsRUFFQSxhQUFhO0FBQ1osVUFBTSxPQUFPLFNBQVMsY0FBYyxLQUFLO0FBQ3pDLFNBQUssU0FBUyw4QkFBOEI7QUFDNUMsVUFBTSxRQUFRLEtBQUssWUFBWTtBQUMvQixVQUFNLGFBQWEsZUFBZSx3QkFBd0I7QUFDMUQsVUFBTSxTQUFTLEtBQUssYUFBYTtBQUNqQyxTQUFLLFlBQVksS0FBSztBQUN0QixTQUFLLFlBQVksTUFBTTtBQUV2QixXQUFPO0FBQUEsRUFDUjtBQUFBLEVBRUEsQUFBTSxhQUFhO0FBQUE7QUFDbEIsWUFBTSxPQUFPLFNBQVMsY0FBYyxLQUFLO0FBQ3pDLFdBQUssYUFBYSxxQ0FBcUMsRUFBRTtBQUN6RCxXQUFLLFNBQVMsd0NBQXdDO0FBQ3RELFlBQU0sZUFBZSxNQUFNLEtBQUssZ0JBQWdCO0FBQ2hELFdBQUssWUFBWSxZQUFZO0FBQzdCLGFBQU87QUFBQSxJQUNSO0FBQUE7QUFBQSxFQUVBLEFBQU0sZUFBZTtBQUFBO0FBQ3BCLFlBQU0sRUFBQyxjQUFhO0FBQ3BCLGdCQUFVLE1BQU07QUFDaEIsWUFBTSxZQUFZLEtBQUssZ0JBQWdCO0FBQ3ZDLFlBQU0sT0FBTyxLQUFLLFdBQVc7QUFDN0IsWUFBTSxPQUFPLE1BQU0sS0FBSyxXQUFXO0FBQ25DLGdCQUFVLFlBQVksSUFBSTtBQUMxQixnQkFBVSxZQUFZLElBQUk7QUFDMUIsZ0JBQVUsWUFBWSxTQUFTO0FBRS9CLGFBQU87QUFBQSxJQUNSO0FBQUE7QUFBQSxFQUVBLEFBQU0sU0FBUztBQUFBO0FBQ2QsWUFBTSxPQUFPLE1BQU0sS0FBSyxhQUFhO0FBQUEsSUFDdEM7QUFBQTtBQUFBLEVBRUEsVUFBVTtBQUNULFVBQU0sRUFBQyxjQUFhO0FBQ3BCLGNBQVUsTUFBTTtBQUNoQixTQUFLLE9BQU8sb0JBQW9CLFNBQVMsS0FBSyxvQkFBb0I7QUFDbEUsU0FBSyxNQUFNLG9CQUFvQixXQUFXLEtBQUssbUJBQW1CO0FBQUEsRUFDbkU7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
